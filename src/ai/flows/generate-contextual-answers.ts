// src/ai/flows/generate-contextual-answers.ts
'use server';

/**
 * @fileOverview This file defines a Genkit flow for generating contextual answers based on a query against stored documents.
 *
 * - generateContextualAnswer - A function that retrieves relevant text chunks from a vector database and uses an LLM to generate contextual answers.
 * - GenerateContextualAnswerInput - The input type for the generateContextualAnswer function.
 * - GenerateContextualAnswerOutput - The return type for the generateContextualAnswer function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const GenerateContextualAnswerInputSchema = z.object({
  query: z.string().describe('The user query to answer.'),
  relevantChunks: z.array(z.string()).describe('The relevant text chunks retrieved from the vector database.'),
});
export type GenerateContextualAnswerInput = z.infer<typeof GenerateContextualAnswerInputSchema>;

const GenerateContextualAnswerOutputSchema = z.object({
  answer: z.string().describe('The contextual answer generated by the LLM.'),
});
export type GenerateContextualAnswerOutput = z.infer<typeof GenerateContextualAnswerOutputSchema>;

export async function generateContextualAnswer(input: GenerateContextualAnswerInput): Promise<GenerateContextualAnswerOutput> {
  return generateContextualAnswerFlow(input);
}

const prompt = ai.definePrompt({
  name: 'generateContextualAnswerPrompt',
  input: {schema: GenerateContextualAnswerInputSchema},
  output: {schema: GenerateContextualAnswerOutputSchema},
  prompt: `You are an AI assistant that answers questions based on the provided context.

Context:
{{#each relevantChunks}}
{{this}}
{{/each}}

Question: {{query}}

Answer:`, // Handlebars template to iterate over relevantChunks
});

const generateContextualAnswerFlow = ai.defineFlow(
  {
    name: 'generateContextualAnswerFlow',
    inputSchema: GenerateContextualAnswerInputSchema,
    outputSchema: GenerateContextualAnswerOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);
